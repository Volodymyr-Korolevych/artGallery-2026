name: Apply TASK-002 (admin panel + username + storage + fixes)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to commit to'
        required: true
        default: 'main'
      commit_message:
        description: 'Commit message'
        required: true
        default: 'TASK-002: admin panel, username in profiles, header UX, storage uploads, selects, cardUrl'

permissions:
  contents: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Create SQL migrations (profiles.username, exhibitions.cardUrl, storage)
        run: |
          mkdir -p supabase/migrations

          # 007: profiles.username + triggers to ensure and normalize username; admin → "адмін"
          cat > supabase/migrations/007_profiles_username.sql << 'SQL'
          -- Add username to profiles if not exists
          do $$
          begin
            if not exists (
              select 1 from information_schema.columns
              where table_name='profiles' and column_name='username'
            ) then
              execute 'alter table profiles add column "username" text';
            end if;
          end $$;

          -- helper to slugify username if empty; admin -> "адмін"
          create or replace function ensure_profile_username(p_user uuid)
          returns void language plpgsql as $$
          declare
            v_is_admin boolean := false;
            v_uname text;
          begin
            select coalesce(role='admin', false), nullif(username, '')
              into v_is_admin, v_uname
            from profiles where id = p_user;

            if v_uname is null then
              -- fallback from email prefix
              update profiles set "username" = split_part(email,'@',1)
              where id = p_user;
            end if;

            -- admin label override
            if v_is_admin then
              update profiles set "username" = 'адмін' where id = p_user;
            end if;
          end; $$;

          -- when profile is inserted (e.g., by existing auth trigger), ensure username
          create or replace function trg_profiles_username()
          returns trigger language plpgsql as $$
          begin
            perform ensure_profile_username(new.id);
            return new;
          end; $$;

          drop trigger if exists trg_profiles_username_ins on profiles;
          create trigger trg_profiles_username_ins
          after insert on profiles
          for each row execute procedure trg_profiles_username();

          -- When clients set user_metadata.username during signUp, mirror it:
          -- If you already have an auth -> profiles provisioning trigger, keep it.
          -- Otherwise create a lightweight sync from auth.users on insert.
          create or replace function handle_new_user()
          returns trigger language plpgsql as $$
          begin
            insert into profiles (id, email, "username", role)
            values (
              new.id,
              new.email,
              coalesce(new.raw_user_meta_data->>'username', split_part(new.email,'@',1)),
              'user'
            )
            on conflict (id) do update
              set email = excluded.email,
                  "username" = excluded."username";
            perform ensure_profile_username(new.id);
            return new;
          end; $$;

          -- Attach to auth.users only if no such trigger exists
          do $$
          begin
            if not exists (select 1 from pg_trigger where tgname='on_auth_user_created') then
              create trigger on_auth_user_created
              after insert on auth.users
              for each row execute procedure handle_new_user();
            end if;
          end $$;

          -- RLS: allow user to see own profile; admin sees all (assumes is_admin())
          drop policy if exists "profiles select own" on profiles;
          create policy "profiles select own" on profiles
            for select using ( id = auth.uid() or is_admin() );
          drop policy if exists "profiles update own" on profiles;
          create policy "profiles update own" on profiles
            for update using ( id = auth.uid() or is_admin() );
          SQL

          # 008: exhibitions.cardUrl
          cat > supabase/migrations/008_exhibitions_cardurl.sql << 'SQL'
          do $$
          begin
            if not exists (
              select 1 from information_schema.columns
              where table_name='exhibitions' and column_name='cardurl'
            ) then
              execute 'alter table exhibitions add column "cardUrl" text';
            end if;
          end $$;
          SQL

          # 009: storage bucket "images" with simple public read / auth write
          cat > supabase/migrations/009_storage_buckets.sql << 'SQL'
          -- Create bucket if missing
          insert into storage.buckets (id, name, public)
          values ('images', 'images', true)
          on conflict (id) do nothing;

          -- Policies
          create policy if not exists "images public read"
          on storage.objects for select
          using ( bucket_id = 'images' );

          create policy if not exists "images auth write"
          on storage.objects for insert
          with check ( bucket_id = 'images' and auth.role() = 'authenticated' );

          create policy if not exists "images auth update"
          on storage.objects for update
          using ( bucket_id = 'images' and auth.role() = 'authenticated' );

          create policy if not exists "images auth delete own"
          on storage.objects for delete
          using ( bucket_id = 'images' and auth.role() = 'authenticated' and owner = auth.uid() );
          SQL

      - name: Add/Update app files (header UX, login with username, admin redirect, storage upload, forms)
        run: |
          mkdir -p components pages/admin composables middleware layouts

          # ---------- composable: storage upload helper ----------
          cat > composables/useStorageUpload.ts << 'TS'
          export function useStorageUpload() {
            const supabase = useSupabaseClient()
            const BUCKET = 'images'

            const uploadFile = async (file: File, dir = 'uploads') => {
              const ext = file.name.split('.').pop() || 'bin'
              const path = `${dir}/${Date.now()}-${Math.random().toString(36).slice(2)}.${ext}`
              const { data, error } = await supabase.storage.from(BUCKET).upload(path, file, {
                upsert: false,
                contentType: file.type
              })
              if (error) throw error
              const { data: urlData } = supabase.storage.from(BUCKET).getPublicUrl(data.path)
              return urlData.publicUrl
            }

            return { uploadFile }
          }
          TS

          # ---------- middleware: redirect admin to /admin after login ----------
          cat > middleware/redirect-admin.global.ts << 'TS'
          export default defineNuxtRouteMiddleware(async (to, from) => {
            const user = useSupabaseUser()
            const supabase = useSupabaseClient()
            if (!user.value) return

            // fetch profile to check role (cached by Nuxt)
            const { data, error } = await supabase
              .from('profiles')
              .select('role')
              .eq('id', user.value.id)
              .maybeSingle()

            if (!error && data?.role === 'admin' && from.path === '/login' && to.path === '/') {
              return navigateTo('/admin')
            }
          })
          TS

          # ---------- layout/header fixes (prevent overlap + username menu) ----------
          # If you already have layouts/default.vue and components/AppHeader.vue, these will overwrite.
          # Adjust if your filenames differ.
          cat > layouts/default.vue << 'VUE'
          <template>
            <v-app>
              <AppHeader />
              <v-main class="pt-12">
                <slot />
              </v-main>
            </v-app>
          </template>
          VUE

          cat > components/AppHeader.vue << 'VUE'
          <script setup lang="ts">
          const user = useSupabaseUser()
          const supabase = useSupabaseClient()
          const profile = ref<{ username?: string } | null>(null)
          const menu = ref(false)

          watchEffect(async () => {
            if (!user.value) { profile.value = null; return }
            const { data } = await supabase.from('profiles').select('username').eq('id', user.value.id).maybeSingle()
            profile.value = data
          })

          const logout = async () => {
            await supabase.auth.signOut()
            navigateTo('/')
          }
          </script>

          <template>
            <v-app-bar color="primary" density="comfortable" flat>
              <v-toolbar-title class="font-weight-bold">Art Gallery</v-toolbar-title>
              <v-spacer />
              <v-btn variant="text" to="/">Головна</v-btn>
              <v-btn variant="text" to="/exhibitions/current">Поточна</v-btn>
              <v-btn variant="text" to="/exhibitions/past">Минулі</v-btn>
              <v-btn variant="text" to="/exhibitions/upcoming">Майбутні</v-btn>
              <v-btn variant="text" to="/artists">Художники</v-btn>
              <v-btn variant="text" to="/tickets">Квитки</v-btn>
              <v-btn variant="text" to="/contacts">Контакти</v-btn>

              <div class="ml-2">
                <template v-if="!user">
                  <v-btn color="secondary" to="/login">Увійти</v-btn>
                </template>
                <template v-else>
                  <v-menu v-model="menu" :close-on-content-click="true" location="bottom">
                    <template #activator="{ props }">
                      <v-btn v-bind="props" color="secondary">
                        {{ profile?.username || 'Кабінет' }}
                      </v-btn>
                    </template>
                    <v-list>
                      <v-list-item @click="logout">Вийти</v-list-item>
                    </v-list>
                  </v-menu>
                </template>
              </div>
            </v-app-bar>
          </template>
          VUE

          # ---------- login page with username field and signUp metadata ----------
          cat > pages/login.vue << 'VUE'
          <script setup lang="ts">
          const supabase = useSupabaseClient()
          const user = useSupabaseUser()

          const email = ref('')
          const password = ref('')
          const username = ref('')

          const err = ref('')
          const loading = ref(false)
          const tab = ref<'signin'|'signup'>('signin')

          watchEffect(() => {
            if (user.value) {
              navigateTo('/')
            }
          })

          const signIn = async () => {
            err.value = ''; loading.value = true
            const { error } = await supabase.auth.signInWithPassword({ email: email.value, password: password.value })
            loading.value = false
            if (error) { err.value = error.message; return }
            // admin redirect handled by redirect-admin.global middleware when navigating from /login to /
            navigateTo('/')
          }

          const signUp = async () => {
            err.value=''; loading.value = true
            const uname = username.value.trim() || email.value.split('@')[0]
            const { error } = await supabase.auth.signUp({
              email: email.value,
              password: password.value,
              options: { data: { username: uname } }
            })
            loading.value = false
            if (error) { err.value = error.message; return }
            navigateTo('/')
          }
          </script>

          <template>
            <div class="max-w-600 mx-auto py-8">
              <v-card class="pa-6">
                <v-tabs v-model="tab" class="mb-4">
                  <v-tab value="signin">Увійти</v-tab>
                  <v-tab value="signup">Зареєструватися</v-tab>
                </v-tabs>

                <div v-if="tab==='signin'">
                  <v-text-field v-model="email" label="Email" type="email" />
                  <v-text-field v-model="password" label="Пароль" type="password" />
                  <v-alert v-if="err" type="error" :text="err" class="mb-2" />
                  <v-btn :loading="loading" color="primary" @click="signIn">Увійти</v-btn>
                </div>

                <div v-else>
                  <v-text-field v-model="email" label="Email" type="email" />
                  <v-text-field v-model="username" label="Username (можна залишити порожнім)" />
                  <v-text-field v-model="password" label="Пароль" type="password" />
                  <v-alert v-if="err" type="error" :text="err" class="mb-2" />
                  <v-btn :loading="loading" color="primary" @click="signUp">Зареєструватися</v-btn>
                </div>
              </v-card>
            </div>
          </template>
          VUE

          # ---------- admin exhibitions: coverUrl & cardUrl uploads + selects ----------
          cat > pages/admin/exhibitions.vue << 'VUE'
          <script setup lang="ts">
          const supabase = useSupabaseClient()
          const { uploadFile } = useStorageUpload()

          const items = ref<any[]>([])
          const artists = ref<any[]>([])
          const dialog = ref(false)
          const edited = ref<any>({})

          const fetchAll = async () => {
            const { data } = await supabase.from('exhibitions').select('*').order('createdAt', { ascending: false })
            items.value = data || []
            const { data: a } = await supabase.from('artists').select('id, fullName')
            artists.value = a || []
          }

          onMounted(fetchAll)

          const newItem = () => { edited.value = { title:'', painterId: null, isPublished: true, coverUrl:'', cardUrl:'' }; dialog.value = true }
          const editItem = (it:any) => { edited.value = { ...it }; dialog.value = true }

          const save = async () => {
            const payload = { ...edited.value }
            if (!payload.id) {
              const { data, error } = await supabase.from('exhibitions').insert(payload).select('*').single()
              if (!error) { items.value.unshift(data!) }
            } else {
              const { data, error } = await supabase.from('exhibitions').update(payload).eq('id', payload.id).select('*').single()
              if (!error) {
                const idx = items.value.findIndex(i => i.id === payload.id)
                if (idx>-1) items.value[idx] = data!
              }
            }
            dialog.value = false
          }

          const del = async (it:any) => {
            await supabase.from('exhibitions').delete().eq('id', it.id)
            items.value = items.value.filter(x => x.id !== it.id)
          }

          const onPick = async (e:Event, field:'coverUrl'|'cardUrl') => {
            const f = (e.target as HTMLInputElement).files?.[0]
            if (!f) return
            const url = await uploadFile(f, 'exhibitions')
            edited.value[field] = url
          }
          </script>

          <template>
            <div class="pa-6">
              <div class="d-flex align-center justify-space-between mb-4">
                <h1 class="text-h5">Виставки</h1>
                <v-btn color="primary" @click="newItem">Додати</v-btn>
              </div>

              <v-data-table :items="items" :headers="[
                { title:'ID', value:'id' },
                { title:'Назва', value:'title' },
                { title:'Художник', value:'painterId' },
                { title:'Опубліковано', value:'isPublished' },
                { title:'Дії', value:'actions', sortable: false }
              ]">
                <template #item.painterId="{ item }">
                  <span>{{ artists.find(a=>a.id===item.painterId)?.fullName || '—' }}</span>
                </template>
                <template #item.isPublished="{ item }">
                  <v-chip :color="item.isPublished ? 'green' : 'grey'">{{ item.isPublished ? 'Так' : 'Ні' }}</v-chip>
                </template>
                <template #item.actions="{ item }">
                  <v-btn size="small" variant="text" @click="editItem(item)">Редагувати</v-btn>
                  <v-btn size="small" variant="text" color="error" @click="del(item)">Видалити</v-btn>
                </template>
              </v-data-table>

              <v-dialog v-model="dialog" max-width="700">
                <v-card class="pa-4">
                  <div class="text-h6 mb-3">{{ edited.id ? 'Редагувати' : 'Створити' }} виставку</div>

                  <v-text-field v-model="edited.title" label="Назва" />
                  <v-select
                    v-model="edited.painterId"
                    :items="artists"
                    item-title="fullName"
                    item-value="id"
                    label="Художник"
                  />
                  <v-switch v-model="edited.isPublished" label="Опубліковано" />

                  <div class="d-flex gap-4">
                    <div class="flex-1">
                      <div class="text-subtitle-2 mb-1">Cover (широкий банер)</div>
                      <input type="file" accept="image/*" @change="e=>onPick(e,'coverUrl')" />
                      <div class="mt-2" v-if="edited.coverUrl"><img :src="edited.coverUrl" style="max-width:100%" /></div>
                    </div>
                    <div class="flex-1">
                      <div class="text-subtitle-2 mb-1">Card (картка у стрічці)</div>
                      <input type="file" accept="image/*" @change="e=>onPick(e,'cardUrl')" />
                      <div class="mt-2" v-if="edited.cardUrl"><img :src="edited.cardUrl" style="max-width:100%" /></div>
                    </div>
                  </div>

                  <div class="d-flex justify-end mt-4">
                    <v-btn variant="text" class="mr-2" @click="dialog=false">Скасувати</v-btn>
                    <v-btn color="primary" @click="save">Зберегти</v-btn>
                  </div>
                </v-card>
              </v-dialog>
            </div>
          </template>

          <style scoped>
          .gap-4 { gap: 16px; }
          .flex-1 { flex: 1; }
          </style>
          VUE

          # ---------- admin artworks: selects for artistId & exhibitionId ----------
          cat > pages/admin/artworks.vue << 'VUE'
          <script setup lang="ts">
          const supabase = useSupabaseClient()
          const arts = ref<any[]>([])
          const artists = ref<any[]>([])
          const exhibitions = ref<any[]>([])
          const dialog = ref(false)
          const edited = ref<any>({})

          const fetchAll = async () => {
            const { data } = await supabase.from('artworks').select('*').order('id', { ascending: false })
            arts.value = data || []
            const { data: a } = await supabase.from('artists').select('id, fullName')
            artists.value = a || []
            const { data: e } = await supabase.from('exhibitions').select('id, title')
            exhibitions.value = e || []
          }
          onMounted(fetchAll)

          const newItem = () => { edited.value = { title:'', artistId:null, exhibitionId:null, isPublished:true, imageUrl:'' }; dialog.value = true }
          const editItem = (it:any) => { edited.value = { ...it }; dialog.value = true }

          const save = async () => {
            const payload = { ...edited.value }
            if (!payload.id) {
              const { data, error } = await supabase.from('artworks').insert(payload).select('*').single()
              if (!error) arts.value.unshift(data!)
            } else {
              const { data, error } = await supabase.from('artworks').update(payload).eq('id', payload.id).select('*').single()
              if (!error) {
                const idx = arts.value.findIndex(i => i.id === payload.id)
                if (idx>-1) arts.value[idx] = data!
              }
            }
            dialog.value = false
          }

          const del = async (it:any) => {
            await supabase.from('artworks').delete().eq('id', it.id)
            arts.value = arts.value.filter(x => x.id !== it.id)
          }
          </script>

          <template>
            <div class="pa-6">
              <div class="d-flex align-center justify-space-between mb-4">
                <h1 class="text-h5">Роботи</h1>
                <v-btn color="primary" @click="newItem">Додати</v-btn>
              </div>

              <v-data-table :items="arts" :headers="[
                { title:'ID', value:'id' },
                { title:'Назва', value:'title' },
                { title:'Художник', value:'artistId' },
                { title:'Виставка', value:'exhibitionId' },
                { title:'Опубліковано', value:'isPublished' },
                { title:'Дії', value:'actions', sortable:false }
              ]">
                <template #item.artistId="{ item }">
                  <span>{{ artists.find(a=>a.id===item.artistId)?.fullName || '—' }}</span>
                </template>
                <template #item.exhibitionId="{ item }">
                  <span>{{ exhibitions.find(e=>e.id===item.exhibitionId)?.title || '—' }}</span>
                </template>
                <template #item.isPublished="{ item }">
                  <v-chip :color="item.isPublished ? 'green' : 'grey'">{{ item.isPublished ? 'Так' : 'Ні' }}</v-chip>
                </template>
                <template #item.actions="{ item }">
                  <v-btn size="small" variant="text" @click="editItem(item)">Редагувати</v-btn>
                  <v-btn size="small" variant="text" color="error" @click="del(item)">Видалити</v-btn>
                </template>
              </v-data-table>

              <v-dialog v-model="dialog" max-width="700">
                <v-card class="pa-4">
                  <div class="text-h6 mb-3">{{ edited.id ? 'Редагувати' : 'Створити' }} роботу</div>

                  <v-text-field v-model="edited.title" label="Назва" />
                  <v-select v-model="edited.artistId" :items="artists" item-title="fullName" item-value="id" label="Художник" />
                  <v-select v-model="edited.exhibitionId" :items="exhibitions" item-title="title" item-value="id" label="Виставка" />
                  <v-switch v-model="edited.isPublished" label="Опубліковано" />

                  <div class="d-flex justify-end mt-4">
                    <v-btn variant="text" class="mr-2" @click="dialog=false">Скасувати</v-btn>
                    <v-btn color="primary" @click="save">Зберегти</v-btn>
                  </div>
                </v-card>
              </v-dialog>
            </div>
          </template>
          VUE

      - name: Commit & push
        run: |
          git config user.name "gallery-bot"
          git config user.email "actions@users.noreply.github.com"
          git add \
            supabase/migrations/*.sql \
            composables/useStorageUpload.ts \
            middleware/redirect-admin.global.ts \
            layouts/default.vue \
            components/AppHeader.vue \
            pages/login.vue \
            pages/admin/exhibitions.vue \
            pages/admin/artworks.vue

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "${{ github.event.inputs.commit_message }}"
          git push origin HEAD:${{ github.event.inputs.branch }}

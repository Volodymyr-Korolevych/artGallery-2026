name: Apply TASK-004-B-FIX2 (slug auto, UA dates, YAML safe)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to commit to"
        required: true
        default: "main"
      commit_message:
        description: "Commit message"
        required: true
        default: "TASK-004-B-FIX2: slug auto-generate, Vuetify v-date-picker with uk locale, YAML quoting"

permissions:
  contents: write

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Apply patch (pages + composables)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p composables pages/admin/exhibitions

          # ---- slugify helper (client-side) ----
          cat > composables/useSlug.ts <<'TS'
          export function useSlug() {
            const slugify = (s: string) =>
              s
                .normalize('NFKD')
                .replace(/[\u0300-\u036f]/g, '')
                .replace(/[^a-zA-Z0-9\s-]/g, '')
                .trim()
                .toLowerCase()
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-')
            return { slugify }
          }
          TS

          # ---- /admin/exhibitions/new (no uploads, no isPublished; add slug + date pickers) ----
          cat > pages/admin/exhibitions/new.vue <<'VUE'
          <script setup lang="ts">
          definePageMeta({ layout: 'admin', middleware: 'admin-only' })
          const supabase = useSupabaseClient()
          const { slugify } = useSlug()

          const title = ref('Додати виставку')
          const artists = ref<any[]>([])
          const form = ref<{
            title: string
            painterId: number|null
            description: string
            startDate: string | null   // YYYY-MM-DD
            endDate: string | null     // YYYY-MM-DD
          }>({
            title: '',
            painterId: null,
            description: '',
            startDate: null,
            endDate: null
          })

          const loading = ref(false)
          const errorMsg = ref<string | null>(null)
          const showStart = ref(false)
          const showEnd = ref(false)

          const fetchArtists = async () => {
            const { data, error } = await supabase.from('artists').select('id,"fullName"').order('fullName')
            if (!error) artists.value = data || []
          }
          onMounted(fetchArtists)

          const save = async () => {
            errorMsg.value = null
            if (!form.value.title?.trim()) { errorMsg.value = 'Вкажіть назву виставки'; return }
            if (!form.value.painterId)     { errorMsg.value = 'Оберіть художника'; return }

            loading.value = true
            try {
              // 1) побудувати базовий slug
              let base = slugify(form.value.title)
              if (!base) base = 'exhibition'
              let candidate = base
              // 2) перевірити колізії і знайти вільний слуг
              let n = 1
              while (true) {
                const { data: exists, error } = await supabase
                  .from('exhibitions')
                  .select('id')
                  .eq('slug', candidate)
                  .limit(1)
                if (error) throw error
                if (!exists || exists.length === 0) break
                n += 1
                candidate = `${base}-${n}`
                if (n > 9999) throw new Error('Не вдалося згенерувати унікальний slug')
              }

              const payload:any = {
                title: form.value.title.trim(),
                slug: candidate,
                painterId: form.value.painterId,
                description: form.value.description || '',
                startDate: form.value.startDate ? new Date(form.value.startDate).toISOString() : null,
                endDate:   form.value.endDate ? new Date(form.value.endDate).toISOString() : null,
                isPublished: false,
                coverUrl: null,
                cardUrl:  null
              }

              const { data, error } = await supabase
                .from('exhibitions')
                .insert(payload)
                .select('*')
                .single()
              if (error) throw error
              if (data?.id) navigateTo('/admin/exhibitions/' + data.id)
            } catch (e:any) {
              errorMsg.value = e?.message || 'Помилка збереження'
            } finally {
              loading.value = false
            }
          }
          </script>

          <template>
            <div class="page">
              <div class="head">
                <h1 class="text-h5">{{ title }}</h1>
                <div class="actions">
                  <v-btn color="primary" :loading="loading" @click="save">Зберегти</v-btn>
                </div>
              </div>

              <v-card class="pa-4">
                <v-alert v-if="errorMsg" type="error" class="mb-4" density="compact">{{ errorMsg }}</v-alert>

                <v-text-field v-model="form.title" label="Назва" />
                <v-select
                  v-model="form.painterId"
                  :items="artists"
                  item-title="fullName"
                  item-value="id"
                  label="Художник"
                />
                <v-textarea v-model="form.description" label="Опис виставки" auto-grow />

                <div class="grid-2">
                  <div>
                    <v-text-field
                      v-model="form.startDate"
                      label="Дата початку"
                      readonly
                      :value="form.startDate"
                      @click="showStart = true"
                    />
                    <v-dialog v-model="showStart" max-width="360">
                      <v-card>
                        <v-date-picker v-model="form.startDate" locale="uk" hide-actions />
                        <v-card-actions class="justify-end">
                          <v-btn variant="text" @click="showStart=false">OK</v-btn>
                        </v-card-actions>
                      </v-card>
                    </v-dialog>
                  </div>

                  <div>
                    <v-text-field
                      v-model="form.endDate"
                      label="Дата завершення"
                      readonly
                      :value="form.endDate"
                      @click="showEnd = true"
                    />
                    <v-dialog v-model="showEnd" max-width="360">
                      <v-card>
                        <v-date-picker v-model="form.endDate" locale="uk" hide-actions />
                        <v-card-actions class="justify-end">
                          <v-btn variant="text" @click="showEnd=false">OK</v-btn>
                        </v-card-actions>
                      </v-card>
                    </v-dialog>
                  </div>
                </div>

                <v-alert type="info" variant="tonal" class="mt-4" density="compact">
                  Зображення (cover/card) і публікацію можна додати після створення — у режимі редагування.
                </v-alert>
              </v-card>
            </div>
          </template>

          <style scoped>
          .page { display: grid; gap: 16px; }
          .head { display:flex; align-items:center; justify-content:space-between; }
          .actions { display:flex; gap:8px; }
          .grid-2 { display:grid; grid-template-columns: 1fr 1fr; gap:16px; }
          </style>
          VUE

          # ---- /admin/exhibitions/[id] (date pickers + keep uploads) ----
          cat > pages/admin/exhibitions/[id].vue <<'VUE'
          <script setup lang="ts">
          definePageMeta({ layout: 'admin', middleware: 'admin-only' })
          const route = useRoute()
          const supabase = useSupabaseClient()
          const { uploadCoverForExhibition, uploadCardForExhibition } = useStorageUpload()
          const { removeExhibitionFiles } = useExhibitionStorage()

          const id = Number(route.params.id)
          const title = ref('Редагувати виставку')
          const artists = ref<any[]>([])
          const form = ref<any>(null)
          const loading = ref(true)
          const saving  = ref(false)
          const editMode = ref(true)
          const errorMsg = ref<string | null>(null)

          const showStart = ref(false)
          const showEnd = ref(false)

          const fetchArtists = async () => {
            const { data } = await supabase.from('artists').select('id,"fullName"').order('fullName')
            artists.value = data || []
          }

          const fromISOtoYMD = (s: string | null) => {
            if (!s) return null
            const d = new Date(s)
            const yyyy = d.getFullYear()
            const mm = String(d.getMonth()+1).padStart(2,'0')
            const dd = String(d.getDate()).padStart(2,'0')
            return `${yyyy}-${mm}-${dd}`
          }

          const fetchOne = async () => {
            loading.value = true
            const { data } = await supabase.from('exhibitions').select('*').eq('id', id).maybeSingle()
            if (data) {
              form.value = {
                ...data,
                startDate: fromISOtoYMD(data.startDate),
                endDate:   fromISOtoYMD(data.endDate)
              }
              if (data.isPublished) { title.value = 'Переглянути виставку'; editMode.value = false }
              else { title.value = 'Редагувати виставку'; editMode.value = true }
            }
            loading.value = false
          }

          onMounted(async () => {
            await Promise.all([fetchArtists(), fetchOne()])
          })

          const enableEdit = () => { editMode.value = true; title.value = 'Редагувати виставку' }

          const save = async () => {
            if (!form.value) return
            errorMsg.value = null
            saving.value = true
            try {
              const payload = { ...form.value }
              payload.startDate = form.value.startDate ? new Date(form.value.startDate).toISOString() : null
              payload.endDate   = form.value.endDate ? new Date(form.value.endDate).toISOString() : null
              const { data, error } = await supabase.from('exhibitions').update(payload).eq('id', id).select('*').single()
              if (error) throw error
              if (data) {
                form.value = {
                  ...data,
                  startDate: fromISOtoYMD(data.startDate),
                  endDate:   fromISOtoYMD(data.endDate)
                }
                if (data.isPublished) { title.value = 'Переглянути виставку'; editMode.value = false }
              }
            } catch (e:any) {
              errorMsg.value = e?.message || 'Помилка збереження'
            } finally {
              saving.value = false
            }
          }

          const del = async () => {
            if (!confirm('Видалити виставку? Дію не можна скасувати.')) return
            await removeExhibitionFiles(id)
            await supabase.from('exhibitions').delete().eq('id', id)
            navigateTo('/admin/exhibitions')
          }

          // file inputs (приховані)
          const coverInput = ref<HTMLInputElement|null>(null)
          const cardInput  = ref<HTMLInputElement|null>(null)
          const pickCover = () => coverInput.value?.click()
          const pickCard  = () => cardInput.value?.click()

          const onCoverChange = async (e: Event) => {
            const f = (e.target as HTMLInputElement).files?.[0]
            if (!f || !form.value?.id) return
            const url = await uploadCoverForExhibition(form.value.id, f)
            form.value.coverUrl = url
            await supabase.from('exhibitions').update({ coverUrl: url }).eq('id', form.value.id)
          }
          const onCardChange = async (e: Event) => {
            const f = (e.target as HTMLInputElement).files?.[0]
            if (!f || !form.value?.id) return
            const url = await uploadCardForExhibition(form.value.id, f)
            form.value.cardUrl = url
            await supabase.from('exhibitions').update({ cardUrl: url }).eq('id', form.value.id)
          }
          </script>

          <template>
            <div class="page" v-if="!loading && form">
              <div class="head">
                <h1 class="text-h5">{{ title }}</h1>
                <div class="actions">
                  <v-btn v-if="!editMode" variant="tonal" @click="enableEdit">Редагувати</v-btn>
                  <v-btn v-if="editMode" color="error" variant="tonal" @click="del">Видалити</v-btn>
                  <v-btn v-if="editMode" color="primary" :loading="saving" @click="save">Зберегти</v-btn>
                </div>
              </div>

              <v-card class="pa-4">
                <v-alert v-if="errorMsg" type="error" class="mb-4" density="compact">{{ errorMsg }}</v-alert>

                <v-text-field v-model="form.title" :readonly="!editMode" label="Назва" />
                <v-select
                  v-model="form.painterId"
                  :items="artists"
                  item-title="fullName"
                  item-value="id"
                  label="Художник"
                  :readonly="!editMode"
                />
                <v-textarea v-model="form.description" :readonly="!editMode" label="Опис виставки" auto-grow />

                <div class="grid-2">
                  <div>
                    <v-text-field
                      v-model="form.startDate"
                      label="Дата початку"
                      :readonly="true"
                      @click="editMode && (showStart = true)"
                    />
                    <v-dialog v-model="showStart" max-width="360">
                      <v-card>
                        <v-date-picker v-model="form.startDate" locale="uk" hide-actions />
                        <v-card-actions class="justify-end">
                          <v-btn variant="text" @click="showStart=false">OK</v-btn>
                        </v-card-actions>
                      </v-card>
                    </v-dialog>
                  </div>
                  <div>
                    <v-text-field
                      v-model="form.endDate"
                      label="Дата завершення"
                      :readonly="true"
                      @click="editMode && (showEnd = true)"
                    />
                    <v-dialog v-model="showEnd" max-width="360">
                      <v-card>
                        <v-date-picker v-model="form.endDate" locale="uk" hide-actions />
                        <v-card-actions class="justify-end">
                          <v-btn variant="text" @click="showEnd=false">OK</v-btn>
                        </v-card-actions>
                      </v-card>
                    </v-dialog>
                  </div>
                </div>

                <div class="images">
                  <div>
                    <div class="lbl">Cover (100px)</div>
                    <div class="row">
                      <v-btn v-if="editMode" variant="tonal" @click="pickCover">Оберіть файл</v-btn>
                    </div>
                    <input ref="coverInput" type="file" accept="image/*" class="hidden" @change="onCoverChange" />
                    <v-img v-if="form.coverUrl" :src="form.coverUrl" height="100" cover class="mt-2 rounded-lg" />
                  </div>
                  <div>
                    <div class="lbl">Card (100px)</div>
                    <div class="row">
                      <v-btn v-if="editMode" variant="tonal" @click="pickCard">Оберіть файл</v-btn>
                    </div>
                    <input ref="cardInput" type="file" accept="image/*" class="hidden" @change="onCardChange" />
                    <v-img v-if="form.cardUrl" :src="form.cardUrl" height="100" cover class="mt-2 rounded-lg" />
                  </div>
                </div>

                <div class="artworks">
                  <div class="subhead">Роботи (макс. 6)</div>
                  <div class="slots">
                    <div v-for="i in 6" :key="i" class="slot">—</div>
                  </div>
                </div>
              </v-card>
            </div>
          </template>

          <style scoped>
          .page { display: grid; gap: 16px; }
          .head { display:flex; align-items:center; justify-content:space-between; }
          .actions { display:flex; gap:8px; }
          .grid-2 { display:grid; grid-template-columns: 1fr 1fr; gap:16px; }
          .images { display:grid; grid-template-columns: 1fr 1fr; gap:16px; margin-top:8px; }
          .lbl { font-size: 12px; opacity:.8; margin-bottom:4px; }
          .hidden { display:none; }
          .row { display:flex; gap:8px; align-items:center; }
          .artworks { margin-top: 16px; }
          .subhead { font-weight:600; margin-bottom: 8px; }
          .slots { display:grid; grid-template-columns: repeat(6, 1fr); gap: 8px; }
          .slot { height: 80px; border:1px dashed rgba(0,0,0,.2); border-radius:8px; display:flex; align-items:center; justify-content:center;}
          @media (max-width: 1200px) { .slots { grid-template-columns: repeat(3, 1fr); } }
          </style>
          VUE

      - name: Commit & push
        run: |
          git config user.name "gallery-bot"
          git config user.email "actions@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "${{ github.event.inputs.commit_message }}"
          git push origin HEAD:${{ github.event.inputs.branch }}

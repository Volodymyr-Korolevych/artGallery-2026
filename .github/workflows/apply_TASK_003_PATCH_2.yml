name: Apply TASK-003-PATCH-2 (ua dates, ua file inputs, app/layout structure + footer)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to commit to'
        required: true
        default: 'main'
      commit_message:
        description: 'Commit message'
        required: true
        default: 'TASK-003-PATCH-2: uk-UA dates, v-file-input (UA labels), correct app.vue + AppFooter in default layout'

permissions:
  contents: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Apply patch
        run: |
          mkdir -p components layouts pages/admin

          # 1) Root app.vue: правильна структура + lang="uk"
          cat > app.vue << 'VUE'
          <script setup lang="ts">
          // Головний корінь застосунку, як ти й сказала
          useHead({
            htmlAttrs: { lang: 'uk' }
          })
          </script>

          <template>
            <v-app>
              <v-main>
                <NuxtLayout>
                  <NuxtPage />
                </NuxtLayout>
              </v-main>
            </v-app>
          </template>
          VUE

          # 2) Layouts: header + footer всередині default.vue, без дублювання <v-app>
          cat > layouts/default.vue << 'VUE'
          <template>
            <div class="layout-wrap">
              <AppHeader />
              <main class="app-main">
                <slot />
              </main>
              <AppFooter />
            </div>
          </template>

          <style>
          .layout-wrap { display: flex; flex-direction: column; min-height: 100vh; }
          .app-main { padding-top: 72px; flex: 1 0 auto; }
          @media (max-width: 600px) { .app-main { padding-top: 80px; } }
          </style>
          VUE

          # 3) AppFooter: простий футер
          cat > components/AppFooter.vue << 'VUE'
          <template>
            <v-footer app border class="justify-center py-4">
              <span class="text-caption">&copy; {{ new Date().getFullYear() }} Art Gallery</span>
            </v-footer>
          </template>
          VUE

          # 4) UA дати у таблицях виставок + v-file-input з українськими підписами
          cat > pages/admin/exhibitions.vue << 'VUE'
          <script setup lang="ts">
          const supabase = useSupabaseClient()
          const user = useSupabaseUser()
          const { uploadCoverForExhibition, uploadCardForExhibition } = useStorageUpload()

          const items = ref<any[]>([])
          const artists = ref<any[]>([])
          const dialog = ref(false)
          const edited = ref<any>({})

          const canEdit = ref(false)
          onMounted(async () => {
            if (!user.value) return navigateTo('/login')
            const { data } = await supabase.from('profiles').select('role').eq('id', user.value.id).maybeSingle()
            if (data?.role !== 'admin') return navigateTo('/')
            canEdit.value = true
            await fetchAll()
          })

          const fetchAll = async () => {
            const { data } = await supabase.from('exhibitions').select('*').order('createdAt', { ascending: false })
            items.value = data || []
            const { data: a } = await supabase.from('artists').select('id, "fullName"')
            artists.value = a || []
          }

          const fmtUA = (v: string | null) => v ? new Date(v).toLocaleDateString('uk-UA') : '—'
          const toISODate = (s: string | null) => s ? new Date(s).toISOString() : null

          const newItem = () => {
            edited.value = { title:'', painterId:null, isPublished:true, coverUrl:'', cardUrl:'', startDate:null, endDate:null }
            dialog.value = true
          }
          const editItem = (it:any) => { edited.value = { ...it }; dialog.value = true }

          const save = async () => {
            const payload = { ...edited.value }
            payload.startDate = toISODate(payload.startDate)
            payload.endDate   = toISODate(payload.endDate)

            if (!payload.id) {
              const { data, error } = await supabase.from('exhibitions').insert(payload).select('*').single()
              if (!error && data) items.value.unshift(data)
            } else {
              const { data, error } = await supabase.from('exhibitions').update(payload).eq('id', payload.id).select('*').single()
              if (!error && data) {
                const idx = items.value.findIndex(i => i.id === payload.id)
                if (idx>-1) items.value[idx] = data
              }
            }
            dialog.value = false
          }

          const onCoverPicked = async (files: File[]) => {
            const f = files?.[0]
            if (!f || !edited.value.id) return
            const url = await uploadCoverForExhibition(edited.value.id, f)
            edited.value.coverUrl = url
            await supabase.from('exhibitions').update({ coverUrl: url }).eq('id', edited.value.id)
          }
          const onCardPicked = async (files: File[]) => {
            const f = files?.[0]
            if (!f || !edited.value.id) return
            const url = await uploadCardForExhibition(edited.value.id, f)
            edited.value.cardUrl = url
            await supabase.from('exhibitions').update({ cardUrl: url }).eq('id', edited.value.id)
          }
          </script>

          <template>
            <div class="pa-6">
              <div class="d-flex align-center justify-space-between mb-4">
                <h1 class="text-h5">Виставки</h1>
                <v-btn color="primary" v-if="canEdit" @click="newItem">Додати</v-btn>
              </div>

              <v-data-table :items="items" :headers="[
                { title:'ID', value:'id' },
                { title:'Назва', value:'title' },
                { title:'Художник', value:'painterId' },
                { title:'Початок', value:'startDate' },
                { title:'Кінець', value:'endDate' },
                { title:'Опубліковано', value:'isPublished' },
                { title:'Дії', value:'actions', sortable:false }
              ]">
                <template #item.painterId="{ item }">
                  <span>{{ (artists.find(a=>a.id===item.painterId)?.fullName) || '—' }}</span>
                </template>
                <template #item.startDate="{ item }">
                  <span>{{ fmtUA(item.startDate) }}</span>
                </template>
                <template #item.endDate="{ item }">
                  <span>{{ fmtUA(item.endDate) }}</span>
                </template>
                <template #item.isPublished="{ item }">
                  <v-chip :color="item.isPublished ? 'green' : 'grey'">{{ item.isPublished ? 'Так' : 'Ні' }}</v-chip>
                </template>
                <template #item.actions="{ item }">
                  <v-btn size="small" variant="text" v-if="canEdit" @click="editItem(item)">Редагувати</v-btn>
                  <v-btn size="small" variant="text" v-if="canEdit" color="error" @click="() => {}" disabled>Видалити</v-btn>
                </template>
              </v-data-table>

              <v-dialog v-model="dialog" max-width="760">
                <v-card class="pa-4">
                  <div class="text-h6 mb-3">{{ edited.id ? 'Редагувати' : 'Створити' }} виставку</div>

                  <v-text-field v-model="edited.title" label="Назва" />
                  <v-select
                    v-model="edited.painterId"
                    :items="artists"
                    item-title="fullName"
                    item-value="id"
                    label="Художник"
                  />
                  <v-text-field v-model="edited.startDate" type="date" label="Дата початку (дд.мм.рррр)" />
                  <v-text-field v-model="edited.endDate" type="date" label="Дата завершення (дд.мм.рррр)" />
                  <v-switch v-model="edited.isPublished" label="Опубліковано" />

                  <div class="d-flex gap-4">
                    <div class="flex-1">
                      <div class="text-subtitle-2 mb-1">Cover (широкий банер)</div>
                      <v-file-input
                        accept="image/*"
                        label="Оберіть файл"
                        placeholder="Файл не вибрано"
                        prepend-icon="mdi-image"
                        show-size
                        @update:model-value="onCoverPicked"
                      />
                      <div class="mt-2" v-if="edited.coverUrl"><img :src="edited.coverUrl" style="max-width:100%" /></div>
                    </div>
                    <div class="flex-1">
                      <div class="text-subtitle-2 mb-1">Card (картка у стрічці)</div>
                      <v-file-input
                        accept="image/*"
                        label="Оберіть файл"
                        placeholder="Файл не вибрано"
                        prepend-icon="mdi-image"
                        show-size
                        @update:model-value="onCardPicked"
                      />
                      <div class="mt-2" v-if="edited.cardUrl"><img :src="edited.cardUrl" style="max-width:100%" /></div>
                    </div>
                  </div>

                  <div class="d-flex justify-end mt-4">
                    <v-btn variant="text" class="mr-2" @click="dialog=false">Скасувати</v-btn>
                    <v-btn color="primary" @click="save">Зберегти</v-btn>
                  </div>
                </v-card>
              </v-dialog>
            </div>
          </template>

          <style scoped>
          .gap-4 { gap: 16px; }
          .flex-1 { flex: 1; }
          </style>
          VUE

          # 5) UA file-input + одразу апдейт БД на artists
          cat > pages/admin/artists.vue << 'VUE'
          <script setup lang="ts">
          const supabase = useSupabaseClient()
          const user = useSupabaseUser()
          const { uploadArtistPortrait } = useStorageUpload()

          const items = ref<any[]>([])
          const dialog = ref(false)
          const edited = ref<any>({})

          const canEdit = ref(false)
          onMounted(async () => {
            if (!user.value) return navigateTo('/login')
            const { data } = await supabase.from('profiles').select('role').eq('id', user.value.id).maybeSingle()
            if (data?.role !== 'admin') return navigateTo('/')
            canEdit.value = true
            await fetchAll()
          })

          const fetchAll = async () => {
            const { data } = await supabase.from('artists').select('*').order('id', { ascending: false })
            items.value = data || []
          }

          const newItem = () => { edited.value = { fullName:'', portraitUrl:'', isPublished:true }; dialog.value = true }
          const editItem = (it:any) => { edited.value = { ...it }; dialog.value = true }

          const save = async () => {
            const payload = { ...edited.value }
            if (!payload.id) {
              const { data, error } = await supabase.from('artists').insert(payload).select('*').single()
              if (!error && data) items.value.unshift(data)
            } else {
              const { data, error } = await supabase.from('artists').update(payload).eq('id', payload.id).select('*').single()
              if (!error && data) {
                const idx = items.value.findIndex(i => i.id === payload.id)
                if (idx>-1) items.value[idx] = data
              }
            }
            dialog.value = false
          }

          const onPortraitPicked = async (files: File[]) => {
            const f = files?.[0]
            if (!f || !edited.value.id) return
            const url = await uploadArtistPortrait(edited.value.id, f)
            edited.value.portraitUrl = url
            await supabase.from('artists').update({ portraitUrl: url }).eq('id', edited.value.id)
          }
          </script>

          <template>
            <div class="pa-6">
              <div class="d-flex align-center justify-space-between mb-4">
                <h1 class="text-h5">Художники</h1>
                <v-btn color="primary" v-if="canEdit" @click="newItem">Додати</v-btn>
              </div>

              <v-data-table :items="items" :headers="[
                { title:'ID', value:'id' },
                { title:'Імʼя', value:'fullName' },
                { title:'Опубліковано', value:'isPublished' },
                { title:'Дії', value:'actions', sortable:false }
              ]">
                <template #item.isPublished="{ item }">
                  <v-chip :color="item.isPublished ? 'green' : 'grey'">{{ item.isPublished ? 'Так' : 'Ні' }}</v-chip>
                </template>
                <template #item.actions="{ item }">
                  <v-btn size="small" variant="text" v-if="canEdit" @click="editItem(item)">Редагувати</v-btn>
                </template>
              </v-data-table>

              <v-dialog v-model="dialog" max-width="700">
                <v-card class="pa-4">
                  <div class="text-h6 mb-3">{{ edited.id ? 'Редагувати' : 'Створити' }} художника</div>

                  <v-text-field v-model="edited.fullName" label="Імʼя та прізвище" />
                  <v-switch v-model="edited.isPublished" label="Опубліковано" />

                  <div>
                    <div class="text-subtitle-2 mb-1">Портрет</div>
                    <v-file-input
                      accept="image/*"
                      label="Оберіть файл"
                      placeholder="Файл не вибрано"
                      prepend-icon="mdi-image"
                      show-size
                      @update:model-value="onPortraitPicked"
                    />
                    <div class="mt-2" v-if="edited.portraitUrl"><img :src="edited.portraitUrl" style="max-width:100%" /></div>
                  </div>

                  <div class="d-flex justify-end mt-4">
                    <v-btn variant="text" class="mr-2" @click="dialog=false">Скасувати</v-btn>
                    <v-btn color="primary" @click="save">Зберегти</v-btn>
                  </div>
                </v-card>
              </v-dialog>
            </div>
          </template>
          VUE

          # 6) UA file-input + одразу апдейт БД на artworks
          cat > pages/admin/artworks.vue << 'VUE'
          <script setup lang="ts">
          const supabase = useSupabaseClient()
          const user = useSupabaseUser()
          const { uploadArtworkImage } = useStorageUpload()

          const arts = ref<any[]>([])
          const artists = ref<any[]>([])
          const exhibitions = ref<any[]>([])
          const dialog = ref(false)
          const edited = ref<any>({})

          const canEdit = ref(false)
          onMounted(async () => {
            if (!user.value) return navigateTo('/login')
            const { data } = await supabase.from('profiles').select('role').eq('id', user.value.id).maybeSingle()
            if (data?.role !== 'admin') return navigateTo('/')
            canEdit.value = true
            await fetchAll()
          })

          const fetchAll = async () => {
            const { data } = await supabase.from('artworks').select('*').order('id', { ascending: false })
            arts.value = data || []
            const { data: a } = await supabase.from('artists').select('id, "fullName"')
            artists.value = a || []
            const { data: e } = await supabase.from('exhibitions').select('id, title')
            exhibitions.value = e || []
          }

          const newItem = () => { edited.value = { title:'', artistId:null, exhibitionId:null, isPublished:true, imageUrl:'' }; dialog.value = true }
          const editItem = (it:any) => { edited.value = { ...it }; dialog.value = true }

          const save = async () => {
            const payload = { ...edited.value }
            if (!payload.id) {
              const { data, error } = await supabase.from('artworks').insert(payload).select('*').single()
              if (!error && data) arts.value.unshift(data)
            } else {
              const { data, error } = await supabase.from('artworks').update(payload).eq('id', payload.id).select('*').single()
              if (!error && data) {
                const idx = arts.value.findIndex(i => i.id === payload.id)
                if (idx>-1) arts.value[idx] = data
              }
            }
            dialog.value = false
          }

          const onImagePicked = async (files: File[]) => {
            const f = files?.[0]
            if (!f || !edited.value.id) return
            const url = await uploadArtworkImage(edited.value.id, f)
            edited.value.imageUrl = url
            await supabase.from('artworks').update({ imageUrl: url }).eq('id', edited.value.id)
          }
          </script>

          <template>
            <div class="pa-6">
              <div class="d-flex align-center justify-space-between mb-4">
                <h1 class="text-h5">Роботи</h1>
                <v-btn color="primary" v-if="canEdit" @click="newItem">Додати</v-btn>
              </div>

              <v-data-table :items="arts" :headers="[
                { title:'ID', value:'id' },
                { title:'Назва', value:'title' },
                { title:'Художник', value:'artistId' },
                { title:'Виставка', value:'exhibitionId' },
                { title:'Опубліковано', value:'isPublished' },
                { title:'Дії', value:'actions', sortable:false }
              ]">
                <template #item.isPublished="{ item }">
                  <v-chip :color="item.isPublished ? 'green' : 'grey'">{{ item.isPublished ? 'Так' : 'Ні' }}</v-chip>
                </template>
                <template #item.actions="{ item }">
                  <v-btn size="small" variant="text" v-if="canEdit" @click="editItem(item)">Редагувати</v-btn>
                </template>
              </v-data-table>

              <v-dialog v-model="dialog" max-width="760">
                <v-card class="pa-4">
                  <div class="text-h6 mb-3">{{ edited.id ? 'Редагувати' : 'Створити' }} роботу</div>

                  <v-text-field v-model="edited.title" label="Назва" />
                  <v-select v-model="edited.artistId" :items="artists" item-title="fullName" item-value="id" label="Художник" />
                  <v-select v-model="edited.exhibitionId" :items="exhibitions" item-title="title" item-value="id" label="Виставка" />
                  <v-switch v-model="edited.isPublished" label="Опубліковано" />

                  <div>
                    <div class="text-subtitle-2 mb-1">Зображення роботи</div>
                    <v-file-input
                      accept="image/*"
                      label="Оберіть файл"
                      placeholder="Файл не вибрано"
                      prepend-icon="mdi-image"
                      show-size
                      @update:model-value="onImagePicked"
                    />
                    <div class="mt-2" v-if="edited.imageUrl"><img :src="edited.imageUrl" style="max-width:100%" /></div>
                  </div>

                  <div class="d-flex justify-end mt-4">
                    <v-btn variant="text" class="mr-2" @click="dialog=false">Скасувати</v-btn>
                    <v-btn color="primary" @click="save">Зберегти</v-btn>
                  </div>
                </v-card>
              </v-dialog>
            </div>
          </template>
          VUE

      - name: Commit & push
        run: |
          git config user.name "gallery-bot"
          git config user.email "actions@users.noreply.github.com"
          git add \
            app.vue \
            layouts/default.vue \
            components/AppFooter.vue \
            pages/admin/exhibitions.vue \
            pages/admin/artists.vue \
            pages/admin/artworks.vue

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "${{ github.event.inputs.commit_message }}"
          git push origin HEAD:${{ github.event.inputs.branch }}

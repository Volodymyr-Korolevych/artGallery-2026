name: Apply TASK-006 (Artists like Expositions)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to commit to"
        required: true
        default: "main"
      commit_message:
        description: "Commit message"
        required: true
        default: "TASK-006: admin Artists (index/new/[id]), portrait upload, clean useStorageUpload, remove legacy pages"

permissions:
  contents: write

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Apply TASK-006 patch
        shell: bash
        run: |
          set -euo pipefail

          # 0) Remove legacy pages if exist
          rm -f pages/admin/artists.vue || true
          rm -f pages/admin/artworks.vue || true

          mkdir -p pages/admin/artists 

          # 1) Composable: extend useStorageUpload (remove uploadArtworkImage, add uploadArtistPortrait)
          if [ -f composables/useStorageUpload.ts ]; then
            # Rewrite file with safe, minimal, reusable helpers (cover, card, artist portrait)
            cat > composables/useStorageUpload.ts <<'TS'
            export function useStorageUpload() {
              const supabase = useSupabaseClient()
              const BUCKET = 'images'

              const publicUrl = (path: string) => {
                const { data } = supabase.storage.from(BUCKET).getPublicUrl(path)
                return `${data.publicUrl}?v=${Date.now()}`
              }

              const uploadFile = async (path: string, file: File) => {
                const { error } = await supabase.storage.from(BUCKET).upload(path, file, {
                  cacheControl: '60',
                  upsert: true,
                  contentType: file.type || 'image/jpeg'
                })
                if (error) throw new Error(error.message)
                return publicUrl(path)
              }

              // Exhibitions
              const coverPath = (exhId: number|string) => `exhibitions/${exhId}/cover.jpg`
              const cardPath  = (exhId: number|string) => `exhibitions/${exhId}/card.jpg`
              const uploadCoverForExhibition = (exhId: number|string, file: File) =>
                uploadFile(coverPath(exhId), file)
              const uploadCardForExhibition = (exhId: number|string, file: File) =>
                uploadFile(cardPath(exhId), file)

              // Artists
              const artistPortraitPath = (artistId: number|string) => `artists/${artistId}/portrait.jpg`
              const uploadArtistPortrait = (artistId: number|string, file: File) =>
                uploadFile(artistPortraitPath(artistId), file)

              return {
                uploadCoverForExhibition,
                uploadCardForExhibition,
                uploadArtistPortrait
              }
            }
            TS
          fi

          # 2) /admin/artists/index.vue — список художників
          cat > pages/admin/artists/index.vue <<'VUE'
          <script setup lang="ts">
          definePageMeta({ layout: 'admin', middleware: 'admin-only' })
          const supabase = useSupabaseClient()

          const items = ref<any[]>([])
          const loading = ref(true)
          const errorMsg = ref<string|null>(null)

          const fetchArtists = async () => {
            loading.value = true
            const { data, error } = await supabase
              .from('artists')
              .select('id,"fullName",country,birthYear,imageUrl')
              .order('fullName')
            if (error) errorMsg.value = error.message
            items.value = data || []
            loading.value = false
          }

          onMounted(fetchArtists)

          const goNew = () => navigateTo('/admin/artists/new')
          const open = (id:number) => navigateTo(`/admin/artists/${id}`)
          </script>

          <template>
            <div class="page">
              <div class="head">
                <h1 class="text-h5">Художники</h1>
                <v-btn color="primary" @click="goNew">Додати</v-btn>
              </div>

              <v-alert v-if="errorMsg" type="error" density="compact" class="mb-3">{{ errorMsg }}</v-alert>

              <v-card>
                <v-table density="comfortable">
                  <thead>
                    <tr>
                      <th style="width:72px">Портрет</th>
                      <th>Ім’я</th>
                      <th>Країна</th>
                      <th>Рік нар.</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr v-for="a in items" :key="a.id" class="row" @click="open(a.id)">
                      <td>
                        <v-img v-if="a.imageUrl" :src="a.imageUrl" height="50" contain class="rounded img-auto" />
                      </td>
                      <td>{{ a.fullName }}</td>
                      <td>{{ a.country || '—' }}</td>
                      <td>{{ a.birthYear || '—' }}</td>
                    </tr>
                    <tr v-if="!loading && items.length===0">
                      <td colspan="4" class="muted">Поки немає записів</td>
                    </tr>
                  </tbody>
                </v-table>
              </v-card>
            </div>
          </template>

          <style scoped>
          .page { display: grid; gap: 12px; }
          .head { display:flex; align-items:center; justify-content:space-between; }
          .row { cursor: pointer; }
          .row:hover { background: rgba(0,0,0,.03); }
          .img-auto { width: auto; }
          .muted { color: rgba(0,0,0,.5); text-align:center; padding: 16px; }
          </style>
          VUE

          # 3) /admin/artists/new.vue — створення без зображення (щоб отримати ID)
          cat > pages/admin/artists/new.vue <<'VUE'
          <script setup lang="ts">
          definePageMeta({ layout: 'admin', middleware: 'admin-only' })
          const supabase = useSupabaseClient()

          const title = ref('Додати художника')
          const form = ref<{ fullName: string; description: string; birthYear: number|null; country: string }>(
            { fullName: '', description: '', birthYear: null, country: '' }
          )
          const saving = ref(false)
          const errorMsg = ref<string|null>(null)

          const save = async () => {
            errorMsg.value = null
            if (!form.value.fullName.trim()) { errorMsg.value = 'Вкажіть ім’я художника'; return }
            saving.value = true
            try {
              const payload:any = {
                fullName: form.value.fullName.trim(),
                description: form.value.description || '',
                birthYear: form.value.birthYear,
                country: form.value.country || '',
                imageUrl: null
              }
              const { data, error } = await supabase.from('artists').insert(payload).select('id').single()
              if (error) throw error
              navigateTo('/admin/artists/' + data.id)
            } catch (e:any) {
              errorMsg.value = e?.message || 'Помилка збереження'
            } finally {
              saving.value = false
            }
          }
          </script>

          <template>
            <div class="page">
              <div class="head">
                <h1 class="text-h5">{{ title }}</h1>
                <v-btn color="primary" :loading="saving" @click="save">Зберегти</v-btn>
              </div>

              <v-card class="pa-4">
                <v-alert v-if="errorMsg" type="error" density="compact" class="mb-3">{{ errorMsg }}</v-alert>

                <v-text-field v-model="form.fullName" label="Ім’я" />
                <v-textarea v-model="form.description" label="Опис" auto-grow />
                <div class="grid-2">
                  <v-text-field v-model.number="form.birthYear" label="Рік народження" type="number" />
                  <v-text-field v-model="form.country" label="Країна" />
                </div>

                <v-alert type="info" variant="tonal" density="compact" class="mt-2">
                  Портрет можна додати після створення — у режимі редагування.
                </v-alert>
              </v-card>
            </div>
          </template>

          <style scoped>
          .page { display: grid; gap: 12px; }
          .head { display:flex; align-items:center; justify-content:space-between; }
          .grid-2 { display:grid; grid-template-columns: 1fr 1fr; gap: 12px; }
          </style>
          VUE

          # 4) /admin/artists/[id].vue — редагування/перегляд з аплоадом портрету
          cat > pages/admin/artists/[id].vue <<'VUE'
          <script setup lang="ts">
          definePageMeta({ layout: 'admin', middleware: 'admin-only' })
          const route = useRoute()
          const supabase = useSupabaseClient()
          const { uploadArtistPortrait } = useStorageUpload()

          const id = Number(route.params.id)
          const title = ref('Редагувати художника')
          const form = ref<any>(null)
          const loading = ref(true)
          const saving  = ref(false)
          const errorMsg = ref<string|null>(null)
          const editMode = ref(true)

          const fileInput = ref<HTMLInputElement|null>(null)
          const pickFile = () => fileInput.value?.click()
          const onFile = async (e: Event) => {
            const f = (e.target as HTMLInputElement).files?.[0]
            if (!f || !form.value?.id) return
            try {
              const url = await uploadArtistPortrait(form.value.id, f)
              form.value.imageUrl = url
              await supabase.from('artists').update({ imageUrl: url }).eq('id', form.value.id)
            } catch (e:any) {
              errorMsg.value = e?.message || 'Помилка завантаження зображення'
            }
          }

          const fetchOne = async () => {
            loading.value = true
            const { data, error } = await supabase
              .from('artists')
              .select('id,"fullName",description,birthYear,country,imageUrl')
              .eq('id', id).maybeSingle()
            if (error) errorMsg.value = error.message
            if (data) form.value = data
            loading.value = false
          }

          onMounted(fetchOne)

          const save = async () => {
            if (!form.value) return
            errorMsg.value = null
            saving.value = true
            try {
              const payload:any = {
                fullName: form.value.fullName?.trim(),
                description: form.value.description || '',
                birthYear: form.value.birthYear,
                country: form.value.country || '',
                imageUrl: form.value.imageUrl || null
              }
              const { data, error } = await supabase.from('artists').update(payload).eq('id', id).select('id').single()
              if (error) throw error
              // режим перегляду якщо треба
              // editMode.value = false
            } catch (e:any) {
              errorMsg.value = e?.message || 'Помилка збереження'
            } finally {
              saving.value = false
            }
          }
          </script>

          <template>
            <div class="page" v-if="form">
              <div class="head">
                <h1 class="text-h5">{{ title }}</h1>
                <div class="actions">
                  <v-btn color="primary" :loading="saving" @click="save">Зберегти</v-btn>
                </div>
              </div>

              <v-card class="pa-4">
                <v-alert v-if="errorMsg" type="error" density="compact" class="mb-3">{{ errorMsg }}</v-alert>

                <v-text-field v-model="form.fullName" :readonly="!editMode" label="Ім’я" />
                <v-textarea v-model="form.description" :readonly="!editMode" label="Опис" auto-grow />
                <div class="grid-2">
                  <v-text-field v-model.number="form.birthYear" :readonly="!editMode" label="Рік народження" type="number" />
                  <v-text-field v-model="form.country" :readonly="!editMode" label="Країна" />
                </div>

                <div class="image mt-4">
                  <div class="lbl">Портрет (фікс. висота 100px, пропорції збережені)</div>
                  <div class="row">
                    <v-btn variant="tonal" @click="pickFile">Оберіть файл</v-btn>
                    <input ref="fileInput" type="file" accept="image/*" class="hidden" @change="onFile" />
                  </div>
                  <v-img
                    v-if="form.imageUrl"
                    :src="form.imageUrl"
                    height="100"
                    contain
                    class="mt-2 rounded img-auto"
                  />
                </div>
              </v-card>
            </div>
          </template>

          <style scoped>
          .page { display: grid; gap: 12px; }
          .head { display:flex; align-items:center; justify-content:space-between; }
          .actions { display:flex; gap:8px; }
          .grid-2 { display:grid; grid-template-columns: 1fr 1fr; gap:12px; }
          .hidden { display:none; }
          .row { display:flex; align-items:center; gap:8px; }
          .img-auto { width: auto; }
          .lbl { font-size: 12px; opacity:.8; margin-bottom:4px; }
          </style>
          VUE

      - name: Commit & push
        run: |
          git config user.name "gallery-bot"
          git config user.email "actions@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "${{ github.event.inputs.commit_message }}"
          git push origin HEAD:${{ github.event.inputs.branch }}

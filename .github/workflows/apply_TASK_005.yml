name: Apply TASK-005 (artworks grid + add/edit dialog, storage + DB, contain images)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to commit to"
        required: true
        default: "main"
      commit_message:
        description: "Commit message"
        required: true
        default: "TASK-005: artworks grid (6), add/edit dialog, storage paths, DB schema, contain previews"

permissions:
  contents: write

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Apply patch
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p supabase/sql composables pages/admin/exhibitions

          # --- SQL: artworks table (if not exists) ---
          cat > supabase/sql/005_artworks.sql <<'SQL'
          create table if not exists public.artworks (
            id bigserial primary key,
            exhibitionId bigint not null references public.exhibitions(id) on delete cascade,
            artistId bigint references public.artists(id) on delete set null,
            title text not null,
            year int,
            description text,
            slot int not null check (slot between 1 and 6),
            imageUrl text,
            createdAt timestamptz not null default now(),
            updatedAt timestamptz not null default now()
          );

          create unique index if not exists artworks_exh_slot_uidx
            on public.artworks(exhibitionId, slot);

          -- прості тригери оновлення часу
          create or replace function public.set_updated_at()
          returns trigger language plpgsql as $$
          begin
            new."updatedAt" = now();
            return new;
          end $$;

          drop trigger if exists set_artworks_updated_at on public.artworks;
          create trigger set_artworks_updated_at
            before update on public.artworks
            for each row execute function public.set_updated_at();

          -- RLS (за потреби підрегулюємо під вашу модель)
          alter table public.artworks enable row level security;

          -- читати всі (публічні метадані), якщо потрібно — звузимо пізніше
          do $$
          begin
            if not exists (
              select 1 from pg_policies p
              where p.schemaname='public' and p.tablename='artworks' and p.policyname='artworks read'
            ) then
              create policy "artworks read" on public.artworks
                for select using (true);
            end if;
          end $$;

          -- створювати/оновлювати/видаляти — лише авторизованим (адмін має бути у profiles.role)
          do $$
          begin
            if not exists (
              select 1 from pg_policies p
              where p.schemaname='public' and p.tablename='artworks' and p.policyname='artworks write'
            ) then
              create policy "artworks write" on public.artworks
                for all using (auth.role() = 'authenticated')
                with check (auth.role() = 'authenticated');
            end if;
          end $$;
          SQL

          # --- Composable: upload/move artwork files ---
          cat > composables/useArtworkUpload.ts <<'TS'
          export function useArtworkUpload() {
            const supabase = useSupabaseClient()
            const BUCKET = 'images'

            const artworkPath = (exhId: number | string, slot: number) =>
              `exhibitions/${exhId}/artwork${slot}.jpg`

            const uploadArtwork = async (exhId: number | string, slot: number, file: File) => {
              const path = artworkPath(exhId, slot)
              // upsert = true -> перезапише існуюче
              const { error } = await supabase.storage.from(BUCKET).upload(path, file, {
                cacheControl: '60',
                upsert: true,
                contentType: file.type || 'image/jpeg'
              })
              if (error) throw error
              const { data } = supabase.storage.from(BUCKET).getPublicUrl(path)
              // cache-bust
              return `${data.publicUrl}?v=${Date.now()}`
            }

            // "перейменування" = копія на новий шлях + видалення старого
            const moveArtwork = async (exhId: number | string, oldSlot: number, newSlot: number) => {
              if (oldSlot === newSlot) return
              const from = artworkPath(exhId, oldSlot)
              const to   = artworkPath(exhId, newSlot)
              // завантажити як копію
              const { data: dl, error: dlErr } = await supabase.storage.from(BUCKET).download(from)
              if (dlErr) throw dlErr
              const blob = await dl.blob()
              const { error: upErr } = await supabase.storage.from(BUCKET).upload(to, blob, {
                cacheControl: '60', upsert: true, contentType: blob.type || 'image/jpeg'
              })
              if (upErr) throw upErr
              // видалити старий
              await supabase.storage.from(BUCKET).remove([from])
              const { data } = supabase.storage.from(BUCKET).getPublicUrl(to)
              return `${data.publicUrl}?v=${Date.now()}`
            }

            return { uploadArtwork, moveArtwork }
          }
          TS

          # --- Patch page: /admin/exhibitions/[id].vue (artworks section) ---
          cat > pages/admin/exhibitions/[id].vue <<'VUE'
          <script setup lang="ts">
          definePageMeta({ layout: 'admin', middleware: 'admin-only' })
          const route = useRoute()
          const supabase = useSupabaseClient()
          const { uploadCoverForExhibition, uploadCardForExhibition } = useStorageUpload()
          const { removeExhibitionFiles } = useExhibitionStorage()
          const { uploadArtwork, moveArtwork } = useArtworkUpload()

          const id = Number(route.params.id)
          const title = ref('Редагувати виставку')
          const artists = ref<any[]>([])
          const form = ref<any>(null)
          const loading = ref(true)
          const saving  = ref(false)
          const editMode = ref(true)
          const errorMsg = ref<string | null>(null)

          const showStart = ref(false)
          const showEnd = ref(false)

          // Artworks list
          type Artwork = {
            id?: number
            exhibitionId: number
            artistId: number | null
            title: string
            year: number | null
            description: string | null
            slot: number
            imageUrl: string | null
          }
          const artworks = ref<Artwork[]>([])
          const dialog = ref(false)
          const artForm = ref<Artwork>({
            exhibitionId: id, artistId: null, title: '', year: null, description: '', slot: 1, imageUrl: null
          })
          const fileInput = ref<HTMLInputElement|null>(null)
          const filePending = ref<File|null>(null)
          const editingId = ref<number | null>(null)

          const pickArtFile = () => fileInput.value?.click()
          const onArtFile = (e: Event) => {
            const f = (e.target as HTMLInputElement).files?.[0] || null
            filePending.value = f
          }

          const fetchArtists = async () => {
            const { data } = await supabase.from('artists').select('id,"fullName"').order('fullName')
            artists.value = data || []
          }

          const fromISOtoYMD = (s: string | null) => {
            if (!s) return null
            const d = new Date(s)
            const yyyy = d.getFullYear()
            const mm = String(d.getMonth()+1).padStart(2,'0')
            const dd = String(d.getDate()).padStart(2,'0')
            return `${yyyy}-${mm}-${dd}`
          }

          const fetchOne = async () => {
            loading.value = true
            const { data } = await supabase.from('exhibitions').select('*').eq('id', id).maybeSingle()
            if (data) {
              form.value = {
                ...data,
                startDate: fromISOtoYMD(data.startDate),
                endDate:   fromISOtoYMD(data.endDate)
              }
              if (data.isPublished) { title.value = 'Переглянути виставку'; editMode.value = false }
              else { title.value = 'Редагувати виставку'; editMode.value = true }
            }
            loading.value = false
          }

          const loadArtworks = async () => {
            const { data } = await supabase
              .from('artworks')
              .select('*')
              .eq('exhibitionId', id)
              .order('slot')
            artworks.value = data || []
          }

          onMounted(async () => {
            await Promise.all([fetchArtists(), fetchOne(), loadArtworks()])
          })

          const enableEdit = () => { editMode.value = true; title.value = 'Редагувати виставку' }

          const save = async () => {
            if (!form.value) return
            errorMsg.value = null
            saving.value = true
            try {
              const payload = { ...form.value }
              payload.startDate = form.value.startDate ? new Date(form.value.startDate).toISOString() : null
              payload.endDate   = form.value.endDate ? new Date(form.value.endDate).toISOString() : null
              const { data, error } = await supabase.from('exhibitions').update(payload).eq('id', id).select('*').single()
              if (error) throw error
              if (data) {
                form.value = {
                  ...data,
                  startDate: fromISOtoYMD(data.startDate),
                  endDate:   fromISOtoYMD(data.endDate)
                }
                if (data.isPublished) { title.value = 'Переглянути виставку'; editMode.value = false }
              }
            } catch (e:any) {
              errorMsg.value = e?.message || 'Помилка збереження'
            } finally {
              saving.value = false
            }
          }

          const del = async () => {
            if (!confirm('Видалити виставку? Дію не можна скасувати.')) return
            await removeExhibitionFiles(id)
            await supabase.from('exhibitions').delete().eq('id', id)
            navigateTo('/admin/exhibitions')
          }

          // Cover/Card uploads (contain, fixed height in template)
          const coverInput = ref<HTMLInputElement|null>(null)
          const cardInput  = ref<HTMLInputElement|null>(null)
          const pickCover = () => coverInput.value?.click()
          const pickCard  = () => cardInput.value?.click()
          const onCoverChange = async (e: Event) => {
            const f = (e.target as HTMLInputElement).files?.[0]
            if (!f || !form.value?.id) return
            const url = await uploadCoverForExhibition(form.value.id, f)
            form.value.coverUrl = url
            await supabase.from('exhibitions').update({ coverUrl: url }).eq('id', form.value.id)
          }
          const onCardChange = async (e: Event) => {
            const f = (e.target as HTMLInputElement).files?.[0]
            if (!f || !form.value?.id) return
            const url = await uploadCardForExhibition(form.value.id, f)
            form.value.cardUrl = url
            await supabase.from('exhibitions').update({ cardUrl: url }).eq('id', form.value.id)
          }

          // --- Artworks dialog logic ---
          const openAddArtwork = () => {
            editingId.value = null
            artForm.value = { exhibitionId: id, artistId: form.value?.painterId || null, title: '', year: null, description: '', slot: 1, imageUrl: null }
            filePending.value = null
            dialog.value = true
          }

          const openEditArtwork = (a: Artwork) => {
            editingId.value = a.id || null
            artForm.value = { ...a }
            filePending.value = null
            dialog.value = true
          }

          const saveArtwork = async () => {
            // валідація
            if (!artForm.value.title?.trim()) return alert('Вкажіть назву роботи')
            if (!artForm.value.slot || artForm.value.slot < 1 || artForm.value.slot > 6) return alert('Номер має бути 1..6')

            // якщо змінюємо слот у існуючої роботи — пересунути файл
            if (editingId.value && artworks.value.find(a => a.id === editingId.value)) {
              const prev = artworks.value.find(a => a.id === editingId.value)!
              if (prev.slot !== artForm.value.slot && prev.imageUrl) {
                const newUrl = await moveArtwork(id, prev.slot, artForm.value.slot)
                artForm.value.imageUrl = newUrl
              }
            }

            // якщо є новий файл — завантажити за новим слотом
            if (filePending.value) {
              const url = await uploadArtwork(id, artForm.value.slot, filePending.value)
              artForm.value.imageUrl = url
            }

            // зберегти метадані
            if (editingId.value) {
              await supabase.from('artworks').update({
                title: artForm.value.title.trim(),
                year: artForm.value.year,
                description: artForm.value.description || '',
                slot: artForm.value.slot,
                imageUrl: artForm.value.imageUrl,
                artistId: form.value?.painterId || null
              }).eq('id', editingId.value)
            } else {
              await supabase.from('artworks').insert({
                exhibitionId: id,
                artistId: form.value?.painterId || null,
                title: artForm.value.title.trim(),
                year: artForm.value.year,
                description: artForm.value.description || '',
                slot: artForm.value.slot,
                imageUrl: artForm.value.imageUrl
              })
            }

            dialog.value = false
            await loadArtworks()
          }
          </script>

          <template>
            <div class="page" v-if="!loading && form">
              <div class="head">
                <h1 class="text-h5">{{ title }}</h1>
                <div class="actions">
                  <v-btn v-if="!editMode" variant="tonal" @click="enableEdit">Редагувати</v-btn>
                  <v-btn v-if="editMode" color="error" variant="tonal" @click="del">Видалити</v-btn>
                  <v-btn v-if="editMode" color="primary" :loading="saving" @click="save">Зберегти</v-btn>
                </div>
              </div>

              <v-card class="pa-4">
                <v-alert v-if="errorMsg" type="error" class="mb-4" density="compact">{{ errorMsg }}</v-alert>

                <v-text-field v-model="form.title" :readonly="!editMode" label="Назва" />
                <v-select
                  v-model="form.painterId"
                  :items="artists"
                  item-title="fullName"
                  item-value="id"
                  label="Художник"
                  :readonly="!editMode"
                />
                <v-textarea v-model="form.description" :readonly="!editMode" label="Опис виставки" auto-grow />

                <div class="grid-2">
                  <div>
                    <v-text-field
                      v-model="form.startDate"
                      label="Дата початку"
                      :readonly="true"
                      @click="editMode && (showStart = true)"
                    />
                    <v-dialog v-model="showStart" max-width="360">
                      <v-card>
                        <v-date-picker v-model="form.startDate" locale="uk" hide-actions />
                        <v-card-actions class="justify-end">
                          <v-btn variant="text" @click="showStart=false">OK</v-btn>
                        </v-card-actions>
                      </v-card>
                    </v-dialog>
                  </div>
                  <div>
                    <v-text-field
                      v-model="form.endDate"
                      label="Дата завершення"
                      :readonly="true"
                      @click="editMode && (showEnd = true)"
                    />
                    <v-dialog v-model="showEnd" max-width="360">
                      <v-card>
                        <v-date-picker v-model="form.endDate" locale="uk" hide-actions />
                        <v-card-actions class="justify-end">
                          <v-btn variant="text" @click="showEnd=false">OK</v-btn>
                        </v-card-actions>
                      </v-card>
                    </v-dialog>
                  </div>
                </div>

                <div class="images">
                  <div>
                    <div class="lbl">Cover (фікс. висота 100px, пропорції збережені)</div>
                    <div class="row">
                      <v-btn v-if="editMode" variant="tonal" @click="pickCover">Оберіть файл</v-btn>
                    </div>
                    <input ref="coverInput" type="file" accept="image/*" class="hidden" @change="onCoverChange" />
                    <v-img
                      v-if="form.coverUrl"
                      :src="form.coverUrl"
                      height="100"
                      contain
                      class="mt-2 rounded-lg img-auto"
                    />
                  </div>
                  <div>
                    <div class="lbl">Card (фікс. висота 100px, пропорції збережені)</div>
                    <div class="row">
                      <v-btn v-if="editMode" variant="tonal" @click="pickCard">Оберіть файл</v-btn>
                    </div>
                    <input ref="cardInput" type="file" accept="image/*" class="hidden" @change="onCardChange" />
                    <v-img
                      v-if="form.cardUrl"
                      :src="form.cardUrl"
                      height="100"
                      contain
                      class="mt-2 rounded-lg img-auto"
                    />
                  </div>
                </div>

                <div class="artworks">
                  <div class="head2">
                    <div class="subhead">Роботи (макс. 6)</div>
                    <v-btn variant="tonal" @click="openAddArtwork">Додати роботу</v-btn>
                  </div>
                  <div class="slots">
                    <div
                      v-for="i in 6"
                      :key="i"
                      class="slot"
                      @click="openEditArtwork(artworks.find(a => a.slot===i) || { exhibitionId: id, artistId: form?.painterId || null, title: '', year: null, description: '', slot: i, imageUrl: null })"
                    >
                      <v-img
                        v-if="artworks.find(a => a.slot===i)?.imageUrl"
                        :src="artworks.find(a => a.slot===i)?.imageUrl"
                        height="100"
                        contain
                        class="rounded-lg img-auto"
                      />
                      <div v-else class="placeholder">—</div>
                      <div class="caption">
                        {{ artworks.find(a => a.slot===i)?.title || ('Робота ' + i) }}
                      </div>
                    </div>
                  </div>
                </div>
              </v-card>

              <!-- Dialog add/edit artwork -->
              <v-dialog v-model="dialog" max-width="520">
                <v-card class="pa-4">
                  <h2 class="text-subtitle-1 mb-2">{{ editingId ? 'Редагувати роботу' : 'Додати роботу' }}</h2>
                  <v-text-field v-model="artForm.title" label="Назва роботи" />
                  <v-text-field v-model.number="artForm.year" label="Рік" type="number" />
                  <v-textarea v-model="artForm.description" label="Опис" auto-grow />
                  <v-text-field v-model.number="artForm.slot" label="Номер (1–6)" type="number" min="1" max="6" />
                  <div class="row mt-2">
                    <v-btn variant="tonal" @click="pickArtFile">Оберіть файл</v-btn>
                    <input ref="fileInput" type="file" accept="image/*" class="hidden" @change="onArtFile" />
                  </div>
                  <div class="mt-3">
                    <v-img v-if="filePending" :src="URL.createObjectURL(filePending)" height="100" contain class="rounded-lg img-auto" />
                    <v-img v-else-if="artForm.imageUrl" :src="artForm.imageUrl" height="100" contain class="rounded-lg img-auto" />
                  </div>
                  <div class="mt-4 d-flex justify-end" style="gap:8px">
                    <v-btn variant="text" @click="dialog=false">Скасувати</v-btn>
                    <v-btn color="primary" @click="saveArtwork">Зберегти</v-btn>
                  </div>
                </v-card>
              </v-dialog>
            </div>
          </template>

          <style scoped>
          .page { display: grid; gap: 16px; }
          .head { display:flex; align-items:center; justify-content:space-between; }
          .actions { display:flex; gap:8px; }
          .grid-2 { display:grid; grid-template-columns: 1fr 1fr; gap:16px; }
          .images { display:grid; grid-template-columns: 1fr 1fr; gap:16px; margin-top:8px; }
          .lbl { font-size: 12px; opacity:.8; margin-bottom:4px; }
          .hidden { display:none; }
          .row { display:flex; gap:8px; align-items:center; }
          .img-auto { width: auto; } /* висота фіксована, ширина — залежно від зображення */
          .artworks { margin-top: 16px; }
          .head2 { display:flex; align-items:center; justify-content:space-between; margin-bottom:8px; }
          .slots { display:grid; grid-template-columns: repeat(6, 1fr); gap: 8px; }
          .slot { padding:8px; border:1px dashed rgba(0,0,0,.2); border-radius:8px; text-align:center; cursor:pointer; }
          .placeholder { height:100px; display:flex; align-items:center; justify-content:center; color: rgba(0,0,0,.38); }
          .caption { margin-top:6px; font-size:12px; opacity:.85; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
          @media (max-width: 1200px) { .slots { grid-template-columns: repeat(3, 1fr); } }
          </style>
          VUE

      - name: Commit & push
        run: |
          git config user.name "gallery-bot"
          git config user.email "actions@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "${{ github.event.inputs.commit_message }}"
          git push origin HEAD:${{ github.event.inputs.branch }}
